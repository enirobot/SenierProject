package com.spring.RNews;

import java.io.File;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.Rserve.*;

import com.github.rcaller.rStuff.RCaller;
import com.github.rcaller.rStuff.RCode;


/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	
	@RequestMapping(value = "/test/", method = RequestMethod.GET)
	public String test(Locale locale, Model model) {
		RConnection connection = null;
		String temp[];
		Object ob;
		
		try {
			connection = new RConnection();
			ob = connection.eval("wordcount_top <-head(sort(wordcount, decreasing = T), 100)").getClass();
			temp = (String[])ob;
			
			System.out.println(temp);
			
		} catch(RserveException e) {
			e.printStackTrace();
		}
		
		
		return "test";
	}
	
	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		RConnection connection = null;
		
		try {
			connection = new RConnection();
			connection.eval("library(\"rJava\")");
			connection.eval("library(\"KoNLP\")");
			connection.eval("library(\"wordcloud\")");
			connection.eval("library(\"RColorBrewer\")");
			connection.eval("useNIADic()");
			
			connection.eval("par(family=\"AppleGothic\")");
			connection.eval("DF <- read.csv('/Users/Enirobot/SenierProject/Web_scraping/news.csv', stringsAsFactors = FALSE)");
			connection.eval("data <- sapply( unique(DF[\"Title\"]), extractNoun, USE.NAMES = F )");
			
			connection.eval("data_unlist <- unlist(data)");
			connection.eval("data_unlist <- gsub(\"[^ㄱ-ㅣ가-힣]+\", \"\", data_unlist)");
			connection.eval("data_unlist <- gsub(\"포토\", \"\", data_unlist)");
			
			connection.eval("data_Filter <- Filter( function(x) {nchar(x) >= 2}, data_unlist)");
			//model.addAttribute("test", );
			connection.eval("wordcount <- table(data_Filter) ");
			System.out.println(connection.eval("wordcount_top <-head(sort(wordcount, decreasing = T), 10)").asStrings()[0]);
//			connection.eval("palete <- brewer.pal(8, \"Dark2\")");
//			
			//connection.eval("wordcloud(names(wordcount_top), freq = wordcount_top, scale = c(4, 0.5), rot.per = 0.1, min.freq = 1, random.order = F, colors = palete, family=\"AppleGothic\")").asNativeJavaObject();
			
//			model.addAttribute("test", connection.eval("wordcloud(names(wordcount_top), freq = wordcount_top, scale = c(4, 0.5), rot.per = 0.1, min.freq = 1, random.order = F, colors = palete, family=\"AppleGothic\")").asNativeJavaObject());
		} catch (RserveException e) {
			e.printStackTrace();
		} catch (REXPMismatchException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			connection.close();
		}
		
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		
		return "home";
	}
}
